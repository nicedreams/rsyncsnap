#!/bin/bash
# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ rsyncsnap -- Rsync Incremental Backups Using Bash                          ║
# ║ https://github.com/nicedreams/rsyncsnap                                    ║
# ║ ------------------------------------------------------------------------   ║
# ║ Copyright (C) 2020  Kenneth Bernier <kbernier@gmail.com>                   ║
# ║                                                                            ║
# ║ This program is free software: you can redistribute it and/or modify       ║
# ║ it under the terms of the GNU General Public License as published by       ║
# ║ the Free Software Foundation, either version 3 of the License, or          ║
# ║ (at your option) any later version.                                        ║
# ║                                                                            ║
# ║ This program is distributed in the hope that it will be useful,            ║
# ║ but WITHOUT ANY WARRANTY; without even the implied warranty of             ║
# ║ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              ║
# ║ GNU General Public License for more details.                               ║
# ║                                                                            ║
# ║ You should have received a copy of the GNU General Public License          ║
# ║ along with this program.  If not, see <https://www.gnu.org/licenses/>.     ║
# ╚════════════════════════════════════════════════════════════════════════════╝

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ VARIABLES                                                                  ║
# ╚════════════════════════════════════════════════════════════════════════════╝
version="1.0.2021-02-15-beta (https://github.com/nicedreams/rsyncsnap)"
program_title="rsyncsnap"
rsync_options=(-arvhxSR --numeric-ids)                           # Rsync command options (-avhxRHAWXS)
ssh_options=(-oStrictHostKeyChecking=no -oLogLevel=QUIET -n -q)  # SSH command options (Remove -q to have SSH verbose output.)
datetime="$(printf '%(%Y-%m-%d_%H.%M.%S)T' -1)"                  # datetime formatting
logtmp="$(mktemp)" || logtmp="/tmp/rsyncsnap-${RANDOM}.tmp"      # Temp log location
source="${1%/}"                                                  # Source location removing trailing slash variable
destination="${2%/}"                                             # Destination directory to store backups removing trailing slash from variable)
if [[ "${destination}" = *:* ]]; then use_ssh="Y"; ssh_server="${destination%:*}"; destination_dir="${destination#*:}"; else destination_dir="${destination}"; fi # Set variables if (ssh) colon detected in destination
backup_base="${source[0]##*/}"    # Remove full path
backup_base="${backup_base%.*}"   # Remove extention
current_link="${backup_base}-current" # Softlink name (add/remove . to beginning if want link hidden or visable in backup)

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ FUNCTIONS                                                                  ║
# ╚════════════════════════════════════════════════════════════════════════════╝
msg()  { printf "%s[ INFO ] ${*}\n" 2>&1 | tee -a "${logtmp}" ; }
warn() { printf "%s[ WARN ] ${*}\n" 2>&1 | tee -a "${logtmp}" ; }
fail() { printf "%s[ FAIL ] ${*} - Exiting!\n" 2>&1 | tee -a "${logtmp}"; log_subject="ERROR backup off ${backup_base} to ${destination}"; cleanup; }

usage() {
printf '%s \n' "-------------------------------------------------------------------------------
rsyncsnap
Uses rsync to create incremental hard link snapshots of directories.

USAGE:

  rsyncsnap  <source>  <destination>  [options]

  <source>        Full path and filename of directory or include file
  <destination>   Where to store backups
  <options>       Listed below
--------------------------------------------------------------------------------
OPTIONS:

-s --snapshots      Amount of snapshots to keep:
                    --snapshots 30  (Keep 30 total snapshots)

-d --days           How many days to keep snapshots:
                    --days 45  (Keep 45 days of snapshots)
                    *Does not work when using remote/ssh as destination

-e --exclude        Path of exclude file: --exclude /home/user/rsyncsnap.exclude
-------------------------------------
-l --logfile        Directory and filename location to create/append log file:
                    --logfile /home/user/rsyncsnap.log

-m --mail --email   Send email using mail command:
                    --mail user@domain.com // --mail root
                  
--syslog            Send status to syslog using logger
-------------------------------------
--rsync-options     Default: ${rsync_options[*]}
                    Use custom rsync options instead of built-in default.
                    **Must Use \"quotes\"
                    --rsync-options \"-avhxRHAWXS --numeric-ids\"
-------------------------------------
--pull              Perform pull backup from remote server to local destination
                    Directories must have : <colon> before their names
                    **Must Use \"quotes\"
                    --pull \"<remote directories>\"
                    --pull \":/etc/ :/home/ :/usr/local/\"

--pull-sudo         Use sudo option with ssh:
                    **Must Use \"quotes\"
                    --rsync-path=\"sudo user\"
-------------------------------------
-v | --verbose      Display more verbose output like snapshot amount information
--dryrun            Perform rsync using --dry-run to test backup.
--debug             Use set-x bash option when running script.
-V | --version      Version information
-h | --help         Print this usage information.
--------------------------------------------------------------------------------
EXAMPLES:

  rsyncsnap /root/rsyncsnap.include /mnt/backups \\
            --exclude /root/rsyncsnap.exclude \\
            --snapshots 30 \\
            --days 45 \\
            --logfile /var/log/rsyncsnap.log \\
            --mail user@domain \\
            --syslog

  rsyncsnap /home/user /mnt/backups
  rsyncsnap /root/rsyncsnap.include user@server:/home/user/backups

PULL BACKUP FROM REMOTE SERVER USING SSH:

  rsyncsnap <remote_user@server_to_backup> <local_destination_to_store_backups>
            --pull \"<:directories :on :remote: :server>\"
  
  rsyncsnap user@server /srv/backups/
            --pull \":/etc/ :/home/ :/usr/local/\" \\
            --pull-sudo user
--------------------------------------------------------------------------------
- Using single directory as source will backup single directory.
- Using include file as source will backup directories listed in file.
- Can use multiple source directories within \"quotes\"
  \"/home/user /etc /usr/local/bin\"
--------------------------------------------------------------------------------
NAME OF BACKUP:
- Backup is named based on include filename or the source directory name
  if doing single directory backup.
--------------------------------------------------------------------------------
RESTORE:
- To restore files from backup, manually copy files from backup date/time
  in destination directory to original or alternate location.
--------------------------------------------------------------------------------
"
}

prechecks_exit() {
  if [[ $(command -v rsync &> /dev/null) ]]; then printf '%s \n' "rsync program not found"; fi
  if [[ ! "${source}" ]]; then printf '%s \n' "Source or include file list not entered!"; exit 1; fi
  if [[ ! "${destination_dir}" ]]; then printf '%s \n' "Backup destination not entered!"; exit 1; fi
}

perform_rsync() {
  # Create command based on if include file, directory or pull backup
  if [[ "${backup_type}" == "PULL" ]]; then source=("${source[@]}""${pull_sources[@]}")
    elif [[ -d "${source}" ]]; then source=("${source[@]}")
    elif [[ -f "${source}" ]]; then source=(--files-from="${source[@]}" /); fi

  rsync_cmd=(rsync
    "${rsync_options[@]}"
    --log-file="${logtmp}"
    --exclude-from="${exclude_file}"
    --exclude="${destination_dir}"
    --link-dest="${destination_dir}"/"${current_link}"/
    "${sudo_command[@]}"
    "${source[@]}"
    "${destination}"/"${backup_base}"@"${datetime}"/)

  msg "Performing rsync version backup to ${destination}"
  msg " ---- ---- ---- ---- ---- Begin Rsync Log ---- ---- ---- ---- ----"
  "${rsync_cmd[@]}"
  msg " ---- ---- ---- ---- ---- End Rsync Log ---- ---- ---- ---- ----"
  return_code="$?"
  if [[ "${return_code}" == "23" ]]; then
    warn "(rsync code: ${return_code}) partial rsync transfer due to error for ${backup_base} to ${destination}"
  elif [[ "${return_code}" == "11" ]]; then
    fail "(rsync code: ${return_code}) no such file or directory: ${destination}"
  elif [[ "${return_code}" -ne "0" ]]; then
    fail "version backup during (rsync code: ${return_code}) for ${backup_base} to ${destination}"
  elif [[ "${return_code}" == "0" ]]; then
    msg "Completed rsync version backup off ${backup_base} to ${destination}"
    log_subject="COMPLETED backup off ${backup_base} to ${destination}"
  fi
}

local_softlink_snapshots() {
  # -- Create soft link of current date-time to backup just created
  if ! rm -f "${destination_dir}"/"${current_link}"; then fail "Issues removing old softlink"; fi
  if ! ln -s -r "${destination_dir}"/"${backup_base}"@"${datetime}" "${destination}"/"${current_link}"; then
    fail "Creating softlink to ${destination}/${current_link}"; else msg "Created/updated softlink to latest version backup at ${destination}"; fi
  # --- Keep snapshots by (amount)
  if [[ -n "${snapshot_amount}" ]]; then
    # Get amount of backups in destination directory
    num_existing="$(find "${destination_dir}"/"${backup_base}"@* -maxdepth 0 -type d | wc -l)"
    # Remove snapshots amount if over snapshot limit
    if [[ "${num_existing}" -gt "${snapshot_amount}" ]]; then
      ((over="${num_existing}"-"${snapshot_amount}"))
      if ! find "${destination_dir}"/"${backup_base}"@* -maxdepth 0 -type d | head -n "${over}" | while read -r s; do rm -rf "${s}"; done
        then warn "Removing older snapshots -amount- from ${destination}"; else msg "Removed old snapshots by amount - Limit: ${snapshot_amount}"; fi
    fi
  fi
  # --- Keep snapshots by (days)
  if [[ -n "${snapshot_amount_days}" ]]; then
    # List snapshot keep days if hit limit
    if ! find "${destination_dir}"/"${backup_base}"@* -maxdepth 0 -type d -mtime +"${snapshot_amount_days}" -exec rm -rf {} \;
      then warn "Removing older snapshots -days- from ${destination}"; else msg "Removed old snapshots by days - Limit: ${snapshot_amount_days}"; fi
  fi
  # List Snapshots
  if [[ "${verbose}" == "Y" ]]; then msg "Listing backup snapshots at ${destination}"; fi
  if [[ "${verbose}" == "Y" ]]; then printf '%s \n' "$(ls -d1 "${destination_dir}"/"${backup_base}"@*)" 2>&1 | tee -a "${logtmp}"; fi
}

ssh_softlink_snapshots() {
ssh "${ssh_options[@]}" "${ssh_server}" "
  # -- Create/Update Softlink
  if ! rm -f ${destination_dir}/${current_link}; then printf '%s \n' '[ SSH- ] Issues removing old softlink'; fi
  if ! ln -s -r ${destination_dir}/${backup_base}@${datetime} ${destination_dir}/${current_link}; then printf '%s \n' '[ SSH- ] Failed creating softlink to ${destination}/${current_link}'; else printf '%s \n' '[ SSH- ] Created/updated softlink to latest version backup at ${destination}'; fi
  # -- Remove old snapshots (AMOUNT)
  if [[ ${snapshot_amount} ]]; then
    # Get amount of backups in destination directory
    num_existing=\$(find ${destination_dir}/${backup_base}@* -maxdepth 0 -type d | wc -l)
    # Remove snapshots if over snapshot limit
    if [[ \${num_existing} -gt ${snapshot_amount} ]]; then
      ((over=${num_existing}-${snapshot_amount}))
      if ! find ${destination_dir}/${backup_base}@* -maxdepth 0 -type d | head -n \${over} | while read -r s; do rm -rf \${s}; done
        then printf '%s \n' '[ SSH- ] Issues removing older snapshots -amount- from ${destination}'; else printf '%s \n' '[ SSH- ] Removed old snapshots by amount - Limit: ${snapshot_amount}'; fi
    fi
  fi
  # -- List Snapshots
  if [[ ${verbose} == Y ]]; then printf '%s \n' '[ SSH- ] Listing backup snapshots at ${destination}'; fi
  if [[ ${verbose} == Y ]]; then printf '%s \n' \$(find ${destination_dir}/${backup_base}@* -maxdepth 0 -type d) 2>&1 | tee -a ${logtmp}; fi
"
}

rsync_dryrun() {
  printf '%s\n\n' "[ DRYRUN ] Performing dry-run of rsync for testing - Actual backup will NOT be performed"
  rsync_options+=( --dry-run)
  perform_rsync
  printf '%s\n\n' "[ DRYRUN ] Finished performing dry-run of rsync for testing - Actual backup was NOT performed"
  exit 0
}

cleanup() {
  if [[ "${logfile}" ]]; then printf "\n\n" >> "${logfile}"; if ! cat "${logtmp}" >> "${logfile}"; then warn "Issues creating/updating logfile"; fi; fi
  rm -f "${logtmp}"
  exit 1
}

command_options() {
  # Multiple Argument Selection
  while [[ "$#" -gt 0 ]]; do  
  option="$1"
  case "$option" in
    -e|--exclude|--excludes) exclude_file="${2%/}" ; if [[ ! "${2}" ]] || [[ "${2}" == -* ]]; then printf '%s \n' "Option argument not entered"; exit 1; fi; shift ;;
    -s|--snapshot|--snapshots) if [[ ! "${2}" ]] || [[ "${2}" == -* ]]; then printf '%s \n' "Option argument not entered"; exit 1; fi; snapshot_amount="$2"; shift ;;
    -d|--days) snapshot_amount_days="$2" ; if [[ ! "${2}" ]] || [[ "${2}" == -* ]]; then printf '%s \n' "Option argument not entered"; exit 1; fi; shift ;;
    --rsync-options) rsync_options=( "$2") ; if [[ ! "${2}" ]] || [[ "${2}" == -* ]]; then printf '%s \n' "Option argument not entered"; exit 1; fi; shift ;;
    --pull-sudo) sudo_user="$2" ; if [[ ! "${2}" ]] || [[ "${2}" == -* ]]; then printf '%s \n' "Option argument not entered"; exit 1; fi; sudo_command=(--rsync-path="sudo ${sudo_user}"); shift ;;
    --pull) pull_sources=($2) ; if [[ ! "${2}" ]] || [[ "${2}" == -* ]]; then printf '%s \n' "Option argument not entered"; exit 1; fi; backup_type="PULL"; use_ssh="N"; shift ;; # Do not quote pull_sources=($2)
    -l|--logfile) logfile="$2"; if [[ ! "${2}" ]] || [[ "${2}" == -* ]]; then printf '%s \n' "Option argument not entered"; exit 1; fi; shift ;;
    -m|--mail|--email) mail_address="$2"; if [[ ! "${2}" ]] || [[ "${2}" == -* ]]; then printf '%s \n' "Option argument not entered"; exit 1; fi; shift ;;
    --syslog) sendsyslog="Y" ;;
    -v|--verbose) verbose="Y" ;;
    --test|--dry-run) rsync_dryrun ;;
    --debug) set -x ;;
    -h|--help) usage; exit 0 ;;
    -V|--version) printf "%srsyncsnap -- v${version}\n"; exit 0 ;;
    -?*) printf '%s \n' "Not a valid option: ${1}  [$0 --help]"; exit 1 ;;
  esac
  shift
  done
}

main() {
  command_options "$@"
  prechecks_exit
  trap cleanup 2 SIGHUP SIGINT SIGQUIT SIGABRT SIGTERM
  # -------------------------------------------------------------
  start=$(date +%s)
  msg "(START) rsyncsnap hardlink version backup"
  if [[ "${backup_type}" == "PULL" ]]; then msg "[PULLING] ${source[*]} to ${destination}"; else msg "[PUSHING] ${source[*]} to ${destination}"; fi
  msg "------------------------------------------------------------------------"
  perform_rsync
  if [[ "${use_ssh}" == "Y" ]] || [[ "${destination_dir}" = *:* ]]; then ssh_softlink_snapshots; else local_softlink_snapshots; fi
  finish=$(date +%s)
  msg "------------------------------------------------------------------------"
  msg "[ Total Time :] $(( (${finish}-${start}) / 60 )) minutes, $(( (${finish}-${start}) % 60 )) seconds"
  msg "(END) rsyncsnap hardlink version backup"
  if [[ "${sendsyslog}" == "Y" ]]; then if ! logger -s -t rsyncsnap "${log_subject[0]}" "${log_subject[2]}" > /dev/null 2>&1; then warn "Issue sending message to syslog via logger"; fi; fi
  if [[ "${mail_address}" ]]; then if ! mail -s "${log_subject[*]}" "${mail_address}" < "${logtmp}"; then warn "Issue sending mail to: ${mail_address}"; fi; fi
  cleanup
}

main "$@"
